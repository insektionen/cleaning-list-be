// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  handle        String             @id @db.Citext
  name          String
  email         String?            @unique
  passwordHash  String
  role          Role               @default(BASE)
  createdLists  List[]             @relation(name: "listCreator")
  ownedLists    List[]             @relation(name: "listOwner")
  verifiedLists ListVerification[]
  visible       Boolean            @default(true)
  lastSignedIn  DateTime?
  token         UserToken?
  resetToken    ResetToken?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  generatedSecrets Secret[]
}

model UserToken {
  token     String   @id
  expiresAt DateTime
  user      User     @relation(fields: [userHandle], references: [handle], onDelete: Cascade)

  userHandle String @unique @db.Citext
}

model List {
  id          Int               @id @default(autoincrement())
  type        String
  version     String
  structure   Json
  fields      Json
  colors      Json?
  responsible String?
  phoneNumber String?
  eventDate   String?
  comment     String?
  submittedAt DateTime?
  verified    ListVerification?
  createdBy   User              @relation(fields: [createdByHandle], references: [handle], name: "listCreator")
  ownedBy     User?             @relation(fields: [ownedByHandle], references: [handle], name: "listOwner")
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now())

  createdByHandle String  @db.Citext
  ownedByHandle   String? @db.Citext
}

model ListVerification {
  list       List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  verifiedAt DateTime @default(now())
  verifiedBy User     @relation(fields: [userHandle], references: [handle], onDelete: Cascade)

  listId     Int    @id
  userHandle String @db.Citext
}

model Secret {
  id          String @id
  secretHash  String
  generatedBy User   @relation(fields: [generatedByHandle], references: [handle])

  generatedByHandle String @db.Citext
}

model ResetToken {
  resetToken String   @id
  validUntil DateTime
  user       User     @relation(fields: [userHandle], references: [handle], onDelete: Cascade)

  userHandle String @unique @db.Citext
}

enum Role {
  ADMIN
  MOD
  MANAGER
  BASE
}
